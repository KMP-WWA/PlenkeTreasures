<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/treasureplinko/ui/start/StartScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/treasureplinko/ui/start/StartScreen.kt" />
              <option name="originalContent" value="package com.example.treasureplinko.ui.start&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.safeDrawing&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.windowInsetsPadding&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.PageSize&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import com.example.treasureplinko.R&#10;import com.example.treasureplinko.ui.components.DotsIndicator&#10;import com.example.treasureplinko.ui.components.IslandCard&#10;import com.example.treasureplinko.ui.components.PressableButton&#10;import com.example.treasureplinko.ui.components.RulesDialog&#10;import com.example.treasureplinko.ui.model.IslandUi&#10;import kotlinx.coroutines.launch&#10;import kotlin.math.absoluteValue&#10;&#10;@Composable&#10;fun StartScreen(&#10;    balance: Int,&#10;    islands: List&lt;IslandUi&gt;,&#10;    selectedIndex: Int,&#10;    isMusicOn: Boolean,&#10;    onSelect: (Int) -&gt; Unit,&#10;    onPlay: () -&gt; Unit,&#10;    onToggleMusic: () -&gt; Unit,&#10;    onShop: () -&gt; Unit&#10;) {&#10;    var showRules by remember { mutableStateOf(false) }&#10;&#10;    if (showRules) {&#10;        RulesDialog(onDismiss = { showRules = false })&#10;    }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Image(&#10;            painter = painterResource(R.drawable.start_screen_bg),&#10;            contentDescription = null,&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentScale = ContentScale.Crop&#10;        )&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .windowInsetsPadding(WindowInsets.safeDrawing)&#10;                .padding(horizontal = 16.dp, vertical = 12.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Image(&#10;                painter = painterResource(R.drawable.logo),&#10;                contentDescription = &quot;Logo&quot;,&#10;                modifier = Modifier&#10;                    .padding(top = 8.dp, bottom = 4.dp)&#10;                    .size(width = 220.dp, height = 150.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            val pagerState = rememberPagerState(&#10;                initialPage = selectedIndex.coerceIn(0, (islands.size - 1).coerceAtLeast(0)),&#10;                pageCount = { islands.size }&#10;            )&#10;            val scope = rememberCoroutineScope()&#10;&#10;            LaunchedEffect(selectedIndex, islands.size) {&#10;                if (islands.isNotEmpty()) {&#10;                    val target = selectedIndex.coerceIn(0, islands.lastIndex)&#10;                    if (pagerState.currentPage != target) pagerState.scrollToPage(target)&#10;                }&#10;            }&#10;            LaunchedEffect(pagerState.currentPage) {&#10;                if (islands.isNotEmpty() &amp;&amp; pagerState.currentPage != selectedIndex) {&#10;                    onSelect(pagerState.currentPage.coerceIn(0, islands.lastIndex))&#10;                }&#10;            }&#10;            HorizontalPager(&#10;                state = pagerState,&#10;                modifier = Modifier&#10;                    .padding(top = 8.dp)&#10;                    .fillMaxWidth(),&#10;                contentPadding = PaddingValues(horizontal = 48.dp),&#10;                pageSize = PageSize.Fill,&#10;                pageSpacing = 16.dp&#10;            ) { page -&gt;&#10;                val pageOffset = (pagerState.currentPage - page).toFloat().absoluteValue&#10;                val scale = 0.9f + (1f - pageOffset.coerceIn(0f, 1f)) * 0.1f&#10;                val item = islands[page]&#10;                IslandCard(&#10;                    title = item.title,&#10;                    artRes = item.artRes,&#10;                    locked = item.locked,&#10;                    progressCurrent = item.progressCurrent,&#10;                    progressTarget = item.progressTarget,&#10;                    scale = scale,&#10;                    onClick = { scope.launch { pagerState.animateScrollToPage(page) } }&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            DotsIndicator(&#10;                total = islands.size,&#10;                selectedIndex = pagerState.currentPage.coerceIn(0, (islands.size - 1).coerceAtLeast(0)),&#10;                onDotClick = { index -&gt;&#10;                    scope.launch {&#10;                        pagerState.animateScrollToPage(index.coerceIn(0, (islands.size - 1).coerceAtLeast(0)))&#10;                    }&#10;                },&#10;                modifier = Modifier.padding(vertical = 4.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            PressableButton(&#10;                modifier = Modifier.size(width = 220.dp, height = 66.dp),&#10;                onClick = {&#10;                    if (islands.getOrNull(pagerState.currentPage)?.locked == false) {&#10;                        onPlay()&#10;                    }&#10;                }&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(R.drawable.ic_play_btn),&#10;                    contentDescription = &quot;Play&quot;,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            PressableButton(&#10;                modifier = Modifier.size(width = 200.dp, height = 66.dp),&#10;                onClick = onShop&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(R.drawable.ic_shop_btn),&#10;                    contentDescription = &quot;Shop&quot;,&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(24.dp),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            ) {&#10;                PressableButton(&#10;                    modifier = Modifier.size(56.dp),&#10;                    onClick = onToggleMusic&#10;                ) {&#10;                    Image(&#10;                        painter = painterResource(if (isMusicOn) R.drawable.ic_music_on else R.drawable.ic_music_off),&#10;                        contentDescription = if (isMusicOn) &quot;Music On&quot; else &quot;Music Off&quot;,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;                PressableButton(&#10;                    modifier = Modifier.size(56.dp),&#10;                    onClick = { showRules = true }&#10;                ) {&#10;                    Image(&#10;                        painter = painterResource(R.drawable.ic_rules_btn),&#10;                        contentDescription = &quot;Rules&quot;,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.treasureplinko.ui.start&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.pager.HorizontalPager&#10;import androidx.compose.foundation.pager.PageSize&#10;import androidx.compose.foundation.pager.rememberPagerState&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.treasureplinko.ui.components.BarButtons&#10;import com.example.treasureplinko.ui.components.DotsIndicator&#10;import com.example.treasureplinko.ui.components.IslandCard&#10;import kotlin.math.absoluteValue&#10;&#10;@Composable&#10;fun StartRoute(&#10;    onPlay: (String) -&gt; Unit,&#10;    onInstructions: () -&gt; Unit = {},&#10;    onShop: () -&gt; Unit = {},&#10;    viewModel: StartViewModel = hiltViewModel()&#10;) {&#10;    val state by viewModel.uiState.collectAsState()&#10;    StartScreen(&#10;        balance = state.balance,&#10;        islands = state.islands.map { Triple(it.title, it.artRes, it.locked) },&#10;        selectedIndex = state.selectedIndex,&#10;        isMusicOn = state.isMusicOn,&#10;        onSelect = viewModel::onSelect,&#10;        onPlay = {&#10;            val selected = state.islands.getOrNull(state.selectedIndex) ?: return@StartScreen&#10;            if (!selected.locked) onPlay(selected.id)&#10;        },&#10;        onToggleMusic = viewModel::toggleMusic,&#10;        onInstructions = onInstructions,&#10;        onShop = onShop&#10;    )&#10;}&#10;&#10;@Composable&#10;fun StartScreen(&#10;    balance: Int,&#10;    islands: List&lt;Triple&lt;String, Int, Boolean&gt;&gt;,&#10;    selectedIndex: Int,&#10;    isMusicOn: Boolean,&#10;    onSelect: (Int) -&gt; Unit,&#10;    onPlay: () -&gt; Unit,&#10;    onToggleMusic: () -&gt; Unit,&#10;    onInstructions: () -&gt; Unit,&#10;    onShop: () -&gt; Unit&#10;) {&#10;    Surface(modifier = Modifier.fillMaxSize()) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            verticalArrangement = Arrangement.spacedBy(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(text = &quot;Treasure Plinko&quot;, style = MaterialTheme.typography.headlineMedium)&#10;            Text(text = &quot;Coins: $balance&quot;, style = MaterialTheme.typography.titleMedium)&#10;&#10;            val pagerState = rememberPagerState(&#10;                initialPage = selectedIndex,&#10;                pageCount = { islands.size }&#10;            )&#10;&#10;            LaunchedEffect(pagerState.currentPage) {&#10;                onSelect(pagerState.currentPage)&#10;            }&#10;&#10;            HorizontalPager(&#10;                state = pagerState,&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentPadding = PaddingValues(horizontal = 48.dp),&#10;                pageSize = PageSize.Fill,&#10;                pageSpacing = 16.dp&#10;            ) { page -&gt;&#10;                val pageOffset = (pagerState.currentPage - page).toFloat().absoluteValue&#10;                val scale = 0.9f + (1f - pageOffset.coerceIn(0f, 1f)) * 0.1f&#10;                val item = islands[page]&#10;                IslandCard(&#10;                    title = item.first,&#10;                    artRes = item.second,&#10;                    locked = item.third,&#10;                    scale = scale,&#10;                    onClick = { onSelect(page) }&#10;                )&#10;            }&#10;&#10;            DotsIndicator(&#10;                total = islands.size,&#10;                selectedIndex = selectedIndex,&#10;                onDotClick = { onSelect(it) }&#10;            )&#10;&#10;            Button(&#10;                onClick = onPlay,&#10;                enabled = islands.getOrNull(selectedIndex)?.third == false&#10;            ) {&#10;                Text(text = &quot;Play&quot;)&#10;            }&#10;&#10;            Button(&#10;                onClick = onShop&#10;            ) {&#10;                Text(text = &quot;Shop&quot;)&#10;            }&#10;&#10;            BarButtons(&#10;                isMusicOn = isMusicOn,&#10;                onToggleMusic = onToggleMusic,&#10;                onInstructions = onInstructions&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>